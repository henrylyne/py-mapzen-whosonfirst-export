#!/usr/bin/env python

import sys
import os.path
import logging
import geojson
import StringIO

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.export
import mapzen.whosonfirst.validator

if __name__ == '__main__':

    import optparse
    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default=None, help='')
    opt_parser.add_option('-i', '--id', dest='id', action='store', default=None, help='')

    opt_parser.add_option('-a', '--alt', dest='alt', action='store', default=None, help='')
    opt_parser.add_option('-d', '--display', dest='display', action='store', default=None, help='')

    opt_parser.add_option('--stdin', dest='stdin', action='store_true', default=False, help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    source = os.path.abspath(options.source)
    exporter = mapzen.whosonfirst.export.flatfile(source)

    if options.id:
        id = int(options.id)

        # Use an alt geometry? [id]-alt-[alt].geojson
        if options.alt:
            feature = mapzen.whosonfirst.utils.load(source, id, alt=options.alt)
        # ... or a display geometry? [id]-display-[display].geojson
        elif options.display:
            feature = mapzen.whosonfirst.utils.load(source, id, display=options.display)
        # ... or just the normal WOF record? [id].geojson
        else:
            feature = mapzen.whosonfirst.utils.load(source, id)

    elif options.stdin:
        feature = geojson.load(sys.stdin)

    else:
        logging.error("Missing feature or feature ID")
        sys.exit()

    vld = mapzen.whosonfirst.validator.validator()
    rpt = vld.validate_feature(feature)

    if not rpt.ok():
        logging.error("validation failed for feature")

        if options.verbose:

            fh = StringIO.StringIO()
            rpt.print_report(fh)
            fh.seek(0)

            logging.debug(fh.readlines())

        sys.exit()

    # alt geometry?
    if options.alt:
        exporter.export_feature(feature, alt=options.alt)
    # ... display geometry?
    elif options.display:
        exporter.export_feature(feature, display=options.display)
    # ... or just the normal WOF record?
    else:
        exporter.export_feature(feature)
    sys.exit()
